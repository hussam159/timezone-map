{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Implementation derived from http://bl.ocks.org/dbuezas/9306799.\n\n/**\n * Default config.\n */\n\n\nvar defaults = {\n  // target element or selector to contain the svg\n  target: '#chart',\n  // width of chart\n  width: 500,\n  // height of chart\n  height: 250,\n  // transition easing function\n  ease: 'linear',\n  // transition duration\n  duration: 600,\n  // donut thickness\n  thickness: 50,\n  // label accessor function\n  label: function label(d) {\n    return d.data.label;\n  },\n  // color range\n  color: ['RGB(0, 177, 240)', 'rgb(243, 43, 101)'],\n  // color interpolation\n  colorInterpolate: _d2.default.interpolateHsl\n};\n/**\n * Mid angle.\n */\n\nfunction midAngle(d) {\n  return d.startAngle + (d.endAngle - d.startAngle) / 2;\n}\n/**\n * PieChart.\n */\n\n\nvar PieChart = function () {\n  /**\n   * Construct with the given `config`.\n   */\n  function PieChart(config) {\n    _classCallCheck(this, PieChart);\n\n    this.set(config);\n    this.init();\n  }\n  /**\n   * Set configuration options.\n   */\n\n\n  _createClass(PieChart, [{\n    key: 'set',\n    value: function set(config) {\n      Object.assign(this, defaults, config);\n    }\n    /**\n     * Initialize the chart.\n     */\n\n  }, {\n    key: 'init',\n    value: function init() {\n      var target = this.target;\n      var width = this.width;\n      var height = this.height;\n      var thickness = this.thickness;\n      var color = this.color;\n      var colorInterpolate = this.colorInterpolate;\n      this.radius = Math.min(width, height) / 2;\n      this.chart = _d2.default.select(target).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(' + width / 2 + ', ' + height / 2 + ')');\n      this.chart.append('g').attr('class', 'slices');\n      this.chart.append('g').attr('class', 'labels');\n      this.chart.append('g').attr('class', 'lines');\n      this.pie = _d2.default.layout.pie().value(function (d) {\n        return d.value;\n      });\n      this.innerArc = _d2.default.svg.arc().outerRadius((this.radius - thickness) * 0.7).innerRadius(this.radius * 0.7);\n      this.outerArc = _d2.default.svg.arc().innerRadius(this.radius * 0.8).outerRadius(this.radius * 0.8);\n      this.color = _d2.default.scale.linear().interpolate(colorInterpolate).range(color);\n    }\n    /**\n     * Render slices.\n     */\n\n  }, {\n    key: 'renderSlices',\n    value: function renderSlices(data) {\n      var chart = this.chart;\n      var color = this.color;\n      var pie = this.pie;\n      var innerArc = this.innerArc;\n      var outerArc = this.outerArc;\n      var duration = this.duration;\n      var ease = this.ease;\n      color.domain([0, data.length]);\n      var slice = chart.select('.slices').selectAll('path.slice').data(pie(data), function (d) {\n        return d.data.label;\n      });\n      slice.enter().insert('path').attr('class', 'slice').style('fill', function (d, i) {\n        return color(i);\n      });\n      slice.transition().duration(duration).ease(ease).attrTween('d', function (d) {\n        this._current = this._current || d;\n\n        var interpolate = _d2.default.interpolate(this._current, d);\n\n        this._current = interpolate(0);\n        return function (t) {\n          return innerArc(interpolate(t));\n        };\n      });\n      slice.exit().remove();\n    }\n    /**\n     * Render slice labels.\n     */\n\n  }, {\n    key: 'renderLabels',\n    value: function renderLabels(data) {\n      var chart = this.chart;\n      var pie = this.pie;\n      var outerArc = this.outerArc;\n      var radius = this.radius;\n      var label = this.label;\n      var duration = this.duration;\n      var ease = this.ease;\n      var text = chart.select('.labels').selectAll('text').data(pie(data), function (d) {\n        return d.data.label;\n      });\n      text.enter().append('text').attr('dy', '.35em').text(label);\n      text.transition().duration(duration).ease(ease).attrTween('transform', function (d) {\n        this._current = this._current || d;\n\n        var interpolate = _d2.default.interpolate(this._current, d);\n\n        this._current = interpolate(0);\n        return function (t) {\n          var d2 = interpolate(t);\n          var pos = outerArc.centroid(d2);\n          pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);\n          return 'translate(' + pos + ')';\n        };\n      }).styleTween('text-anchor', function (d) {\n        this._current = this._current || d;\n\n        var interpolate = _d2.default.interpolate(this._current, d);\n\n        this._current = interpolate(0);\n        return function (t) {\n          var d2 = interpolate(t);\n          return midAngle(d2) < Math.PI ? 'start' : 'end';\n        };\n      });\n      text.exit().remove();\n    }\n    /**\n     * Render label lines.\n     */\n\n  }, {\n    key: 'renderLines',\n    value: function renderLines(data) {\n      var chart = this.chart;\n      var pie = this.pie;\n      var innerArc = this.innerArc;\n      var outerArc = this.outerArc;\n      var radius = this.radius;\n      var duration = this.duration;\n      var ease = this.ease;\n      var polyline = chart.select('.lines').selectAll('polyline').data(pie(data), function (d) {\n        return d.data.label;\n      });\n      polyline.enter().append('polyline');\n      polyline.transition().duration(duration).ease(ease).attrTween('points', function (d) {\n        this._current = this._current || d;\n\n        var interpolate = _d2.default.interpolate(this._current, d);\n\n        this._current = interpolate(0);\n        return function (t) {\n          var d2 = interpolate(t);\n          var pos = outerArc.centroid(d2);\n          pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);\n          return [innerArc.centroid(d2), outerArc.centroid(d2), pos];\n        };\n      });\n      polyline.exit().remove();\n    }\n    /**\n     * Render the chart against the given `data` which takes\n     * an array of objects with a `.label` and numeric `.value`.\n     */\n\n  }, {\n    key: 'render',\n    value: function render(data) {\n      this.renderSlices(data);\n      this.renderLabels(data);\n      this.renderLines(data);\n    }\n    /**\n     * Update the chart against the given `data`.\n     */\n\n  }, {\n    key: 'update',\n    value: function update(data) {\n      this.render(data);\n    }\n  }]);\n\n  return PieChart;\n}();\n\nexports.default = PieChart;","map":null,"metadata":{},"sourceType":"script"}